// Dimensions i estrategia de la terminal

nat _n;                               	// Fileres de la terminal
nat _m;                               	// Plaçes per filera
nat _h;                               	// Alçada màxima d'apilament
estrategia _st;                       	// Estrategia utilizada

nat _opsgrua;							// Nombre d'operacions de grua

struct Cu 								// Tipus Cu: Conté un camp contenidor i un camp ubicació
{                           	
  contenidor c;
  ubicacio u;

  Cu(): c("A10", 10), u(0,0,0){}        // Inicialitzador per defecte del tipus Cu
};


// ------------------------------------------------ Estructures de dades ------------------------------------------------

// 1. Catàleg de contenidors de la terminal (Àrees d'emmagatzematge i espera)
cataleg<Cu> _ct;          				// Guarda els contenidors presents a la terminal,
                          				// sent Clau: String matricula, i Valor: Cu (Struct format per un camp contenidor i un camp ubicació)

// 2. Àrea d'emmagatzematge (AM): Array tridimensional d'strings
string ***_am;


// 3. Llista doblement enllaçada: Guarda ubicacions lliures de l'àrea d'emmagatzematge
struct node
{
  node(): _u(0,0,0) {};				  	// Inicialització del tipus node

  ubicacio _u;                        	// Cada node de la llista guarda un objecte ubicació
  bool _lliu;                         	// Indica si la ubicació està lliure o no
  node *_seg;                         	// Punter al següent node
  node *_ant;                         	// Punter a l'anterior
};
nat _size;							  	// Mida de la llista
node *_head;                          	// Punter al primer element de la llista d'ubicacions lliures


// 4. Àrea espera (AEM): Guarda matricules de contenidors que no han pogut ser col·locats a l'àrea d'emmagatzematge
list<string> _aem;



// Mètodes privats

void inicialitza_am(int n, int m, int h);							// Inicialitza l'AM buida


void crea_llista_lliures(int n, int m, int h);						// Crea llista enllaçada d'ubicacions lliures de l'AM


void borra_llista(node *&n);										// Esborra llista enllaçada d'ubicacions lliures de l'AM


void recorre_dreta(int i, int j, int k, int jorig, int korig);		// Recorre recursivament la part superior dreta d'un contenidor a retirar
																	// Va inserint de dreta a esquerra, d'abaix a dalt, els contenidors superiors al final de l'AEM.
																	// Posteriorment, després de la retirada, el primer que ha accedit a l'AEM, serà el primer a intentar ser reinsertat (FIFO)

void recorre_esq(int i, int j, int k, int jorig, int korig);		// Recorre recursivament la part superior esquerra d'un contenidor a retirar
																	// Va inserint de dreta a esquerra, d'abaix a dalt, els contenidors superiors al final de l'AEM.
																	// Posteriorment, després de la retirada, el primer que ha accedit a l'AEM, serà el primer a intentar ser reinsertat (FIFO)

void reorganitza_aem(nat actuals);									// Després de fer una retirada i abans de fer una reinserció,
																	// els contenidors que havien previament a l'AEM es passen al final

void actualitza_lliures();											// Actualitza la llista d'ubicacions lliures de l'AM després de fer retirades


void reinserta_ff();												// Estrategia FIRST_FIT: Després d'una inserció o retirada, recorre l'AEM per intentar inserir contenidors a l'AM
																	// començant pels últims contenidors afegits a l'AEM

void reinserta_ll();												// Estrategia LLIURE: Després d'una inserció o retirada, recorre l'AEM per intentar inserir contenidors a l'AM
																	// començant pels contenidors de major longitud, i seguint pels menors

void allibera_places(int i, int j, int k, nat longi);				// Després de fer una retirada, allibera les places que ocupava el contenidor a l'AM


void insereix_ff(Cu co_ub) throw(error);         					// Insereix contenidor seguint la estrategia FIRST_FIT


void retira_ff(string m) throw(error);              				// Retira contenidor seguint la estrategia FIRST_FIT



// ----------------------------------------------------- Classe Terminal - Raonament i decisions -----------------------------------------------------

/*
	Les nostres primeres idees de cara a la implementació de la terminal van ser molt dispars, ja que en un principi no acabavem de veure 
	com implementar l'àrea d'emmagatzematge (en endavant AM). Després de valorar els costos mitjos que vam detallar a la part privada de la classe catàleg
	vam pensar en la idea d'implementar un TST per guardar com a claus les ubicacions de l'AM, separant aquestes en símbols d'enters, però ràpid vam descartar
	aquesta possibilitat, degut a que l'accés a ubicacions adjuntes o superiors hagués sigut molt complex. Després vam pensar en realitzar la implementació actual,
	d'un array de 3 dimensions, que en un primer moment vam descartar degut al cost elevat de creació al recorrer tres bucles anidats. 
	No obstant, en el moment en que ho vam pensar amb més deteniment, vam pensar que, la creació de l'estructura es realitza només una vegada, però amb aquest
	tipus d'estructura l'accés a les dades seria molt ràpid. Si tenim en compte les operacions que es realitzarien a la terminal, on n'hi haurà molt moviment
	de contenidors, podria tenir molt sentit utilitzar aquesta estructura. A més, la majoria de casos l'AM tindrà unes dimensions reduïdes, el que fà que,
	encara que es recorrin tres bucles en el moment de la creació, els valors N * M * H reals, no siguin massa elevats.
	
	Per altra banda, l'emmagatzematge dels contenidors presents a tota la terminal, i les ubicacions que ocupen, s'emmagatzemen en un catàleg de contenidors i ubicacions.
	El catàleg emmagatzematge parells de <Clau,Valor> on la clau es un string que fa referència a la matricula d'un contenidor i el valor es un tipus "Cu", 
	un struct creat per nosaltres que conté dos camps: Contenidor i Ubicació. D'aquesta manera, al obtenir una matricula podem saber ràpidament tota la informació
	associada al contenidor i on està ubicat.

	Per guardar les ubicacions lliures de l'AM hem utilitzat una llista doblement enllaçada, on cada element de la llista emmagatzema una ubicació u, 
	un booleà que indica si u està, o no, lliure, i un punter a la següent i a l'anterior ubicació. A la creació de la llista es fixa el recorregut que segueix,
	recorrent per cada plaça tots els pisos de l'AM abans de passar a la següent, i quan arriba a l'ultima plaça, passa a la següent filera (si n'hi hagués), i així successivament.
	Ens ha resultat molt util en el moment de fer insercions, ja que l'accés a places vàlides, descartant-ne les no vàlides, ha sigut molt ràpid.

	Per últim, per a l'àrea d'espera i maniobres (en endavant AEM) hem aprofitat com es demanava, el tipus list de la STD de C++. 

	Els mètodes insereix i retira tenen cost línial, per crides a funcions després de fer la inserció o retirada, respectivament.
	L'operació com a tal es constant, o linial al pitjor cas, però, en el cas dels dos mètodes, després d'insertar (si no s'està reinsertant des de l'AEM) o de retirar,
	es provarà a fer una reinserció des de l'ÀEM per intentar col·locar contenidors que, en situacions anteriors no havia sigut possible. 
	Això fa que després es recorri l'AEM (en cas que no sigui buida), i encara que habitualment el nombre de contenidors presents sigui reduït, el cost augmenta.

	Per últim volem comentar la solució parcial escollida per a la estratègia LLIURE, però primer explicar la nostra idea principal, que no ha pogut ser implementada per falta de temps i
	problemes amb la estratègia FIRST_FIT. 
	En un primer moment, vam estudiar estratègies similars que poguessin donar-nos bons resultants a l'hora de fer insercions i retirades,
	aquests son els algorismes de BEST_FIT i WORST_FIT, en especial la primera d'aquestes. La nostra idea a l'hora d'adaptar l'algorisme de BEST_FIT per a l'AM era anar comprovant
	les ubicacions lliures de l'AM buscant un nombre de places adjacents que coincideixi amb la longitud del contenidor a inserir, o en cas que no fos possible, un nombre de places superior.
	En cas de que no fos possible trobar una ubicació vàlida, el contenidor s'enviaria directament a l'AEM. A l'hora de fer reinsercions, s'utilitzaria una tècnica LIFO,
	on l'ultim en accedir a l'AEM es el primer en sortir cap a l'AM.

	Com hem comentat a l'inici del paràgraf anterior, la nostra idea per a LLIURE no ha pogut ser implementada, per tant, com a solució parcial, hem fet una priorització a l'hora de fer
	reinsercions. Cada cop que es fan reinsercions (després d'una inserció satisfactòria o després d'una retirada) es prioritza afegir a l'AM abans els contenidors amb més longitud,
	per sobre dels menors. Això ho fem per intentar tenir el màxim nombre de contenidors grans a l'AM, i a més, tractar de reduir la fragmentació. A més, traslladant el problema a la vida real,
	creiem oportú el prioritzar contenidors més grans per sobre de més petits.
*/