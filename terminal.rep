// Dimensions i estrategia de la terminal
nat _n;                               // Fileres de la terminal
nat _m;                               // Plaçes per filera
nat _h;                               // Alçada màxima d'apilament
estrategia _st;                       // Estrategia utilizada

struct cu {
  contenidor c;
  ubicacio u;
};
/*cu::cu (contenidor ci, ubicacio ui) throw(error)
: c(ci), u(ui)
{
}*/

// ----- Estructures de dades -----
// 1. Catàleg de contenidors de la terminal (Àrees d'emmagatzematge i espera)
cataleg<cu> _ct;     // Guarda els contenidors presents a la terminal,
                      // sent Clau = Matricula, i Valor = Cu (Struct format per un camp contenidor i un camp ubicació)

// 2. Àrea d'emmagatzematge: Tridimensional array
contenidor est_am[0][0][0];

// 3. Llista enllaçada: Guarda ubicacions lliures de l'àrea d'emmagatzematge
struct node {
  ubicacio _u;                        // Cada node de la llista guarda un objecte ubicació
  bool _lliu;                         // Indica si la ubicació està lliure o no
  node *_seg;                         // Punter al següent node
  node *_ant;                         // Punter a l'anterior
};
node *_head;                          // Punter al primer element de la llista d'ubicacions lliures

/*terminal::node::node(ubicacio ui, bool lliuu, node* _segg, node* _antt)
: _u(ui), _lliu(lliuu), _seg(_segg), _ant(_antt) {}*/

// 4. Àrea espera: Guarda matricules de contenidos que no poden ser col·locats a l'àrea d'emmagatzematge
list<string> _area_espera;

nat opsgrua;


// Mètodes privats
void inicialitza_am(int n, int m, int h);
void crea_llista_lliures(int n, int m, int h);
void borra_llista_lliures(node* &n);

// Ordenació àrea espera
void mergesort(list<string> &l);
void merge(list<string> l1, list<string> l2);

// Estrategia FIRST_FIT
void insereix_ff(contenidor c, nat h) throw(error);         // Insereix contenidor seguint la estrategia FIRST_FIT
void retira_ff(const string &m) throw(error);               // Retira contenidor seguint la estrategia FIRST_FIT

// Estrategia LLIURE
void insereix_cont_LL(const contenidor &c) throw(error);    // Insereix contenidor seguint la estrategia LLIURE
void retira_cont_LL(const string &m) throw(error);          // Retira contenidor seguint la estrategia LLIURE

