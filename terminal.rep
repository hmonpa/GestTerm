// Dimensions de la terminal
nat _n;                               // Fileres de la terminal
nat _m;                               // Plaçes per filera
nat _h;                               // Alçada màxima d'apilament
estrategia _st;                       // Estrategia utilizada

//
//nat const _numelems = _n * _m * _h;

cataleg<contenidor> ct ();    /* Catàleg que guarda els contenidors presents a la terminal (Àrees d'emmagatzematge i d'espera)*/

// Llista enllaçada: Guarda ubicacions lliures de l'àrea d'emmagatzematge
struct node {
  ubicacio _u;                         // Cada node de la llista guarda un objecte ubicació
  node *_seg;                          // Punter al següent node
  node *_ant;
};
node *_head;                          // Punter al primer element de la llista d'ubicacions lliures


cataleg<ubicacio> ut ();     /* Catàleg que guarda ubicacions presents al àrea d'emmagatzematge un cop son ocupades.
                                         La clau es la matricula d'un contenidor i el valor es la ubicació on està situat,
                                         en cas de ser un contenidor de més de 10 peus, la ubicació serà la menor plaça */

// Àrea espera: Guarda contenidors que no poden ser col·locats a l'àrea d'emmagatzematge
list<contenidor> _area_espera;

// Mètodes privats
void crea_llista(nat n, nat m, nat h);

// Estrategia FIRST_FIT
void insereix_ff(const contenidor &c, nat h) throw(error);         // Insereix contenidor seguint la estrategia FIRST_FIT
void retira_ff(const string &m) throw(error);               // Retira contenidor seguint la estrategia FIRST_FIT
// Estrategia LLIURE
void insereix_cont_LL(const contenidor &c) throw(error);    // Insereix contenidor seguint la estrategia LLIURE
void retira_cont_LL(const string &m) throw(error);          // Retira contenidor seguint la estrategia FIRST_FIT


/* Estructuras utilizadas por el momento:
  1. catàleg contenidors
  2. catàleg ubicacions
  3. lista area_espera
  4. gestión forats

  ## ###  ##
  INSEREIX:
  1. Comprovar si un contenidor existeix:
    1.1 En caso afirmativo, lanza error de duplicidad
    1.2 En caso negativo:
        1.2.1 Buscar primer hueco adecuado para nuestro contenedor --> Función privada, que devuelva la ubicacion
              y marque que ubicaciones dejan de estar disponible. Existe ese hueco:
            1.2.1.1 Guardar en catalogo de contenedores el contenedor (objeto) según su clave (matricula)
            1.2.1.2 Guardar en catalogo de ubicaciones (la que hemos sacado en el paso 1.2.1) según su clave (matricula)
        1.2.2 Area espera
*/
