struct node_hash{
    string _k;                    // Clau = String no buit
    Valor _v;                     // Valor
    node_hash *_seg;              // Punter al següent element de la llista de sinònims
};
node_hash **_taula;               // Taula de punters a node

nat _mida;                        // Mida de la taula
nat _quants;                      // Nombre d'elements del catàleg

static float const _alpha = 0.75;  /* Factor de càrrega = _quants / _mida
                                   ... si es tracta d'un valor considerablement petit,
                                   podem assumir que el cost mitjà de totes les operacions
                                   del diccionari (menys la constructora -> θ(n)), tenen cost constant -> θ(1)

                                   Com a regla general, 0.75 es un bon factor de càrrega ja que ofereix un
                                   bon equilibri entre costos temporals i espaials, valors més alts fan
                                   decréixer la sobrecàrrega de l'espai, però incrementa el cost de la cerca */


// Mètodes privats
nat hash(const string &k) const;  // Càlcula la cel·la de la taula per a la clau donada

void redispersio(bool alpha_alt); /* Rehash: Duplica la grandària de la taula al doble de l'actual quam el factor de càrrega
                                    ... supera un cert llindar, reinsertant la informació de la taula original a la nova taula.
                                    També s'aplica a la inversa, per evitar que el factor de càrrega sigui excessivament baix,
                                    es redueix a la meitat la grandària de la taula actual. */

nat primer(nat numelems);         // Si numelems no es un nombre primer, busca el següent


// ------------------------------------ Hash Table - Raonament i decisions ------------------------------------

/*
    La nostra primera idea després de raonar les caràcteristiques de la classe catàleg,
    va ser escollir un BST per desenvolupar el diccionari, pels següents motius:

    1. Implementació: Un BST no deixa de ser un arbre binari buit, o, un arbre binari tal que,
      per a tot node, la clau del node es més gran que qualsevol de les claus del subarbre esquerre,
      i es més petita que qualsevol de les claus del subarbre dret.
    2. Costos: Logaritmics als casos mitjos
    3. No haviem de coneixer previament la quantitat d'elements (nodes)

    Vam comparar els costos mitjos en comparació a altres estructures:

        ---------------------------------------------------------------------------------------
        |    Avg case    |     Crear     |      Inserir    |     Elimina     |    Consulta    |
        ---------------------------------------------------------------------------------------
        |   Hash table   |     θ(n)      |     θ(1)        |     θ(1)        |      θ(1)      |
        |   BST / AVL    |     θ(1)      |     θ(log n)    |     θ(log n)    |      θ(log n)  |
               TRIES:
        |     Punters    |     θ(1)      |     θ(L)        |     θ(L)        |      θ(L)      |
        |  PrimfSeggerm  |     θ(1)      |     θ(L·S)      |     θ(L·S)      |      θ(L·S)    |
        |      TST       |     θ(1)      |    θ(L·log S)   |   θ(L·log S)    |    θ(L·log S)  |
        ---------------------------------------------------------------------------------------
        · S = Nombre de Símbols
        · L = Longitud de la Clau

    No obstant, la nostra idea inicial va canviar, ja que es volia que la consulta a les dades,
    sigues tan ràpida com fos possible, per tant, comparant els costos temporals amb les altres estructures aptes per el
    desenvolupament d'un diccionari, encara que els costos espaials fossin més grans, finalment ens vam decantar per una taula de dispersió.

    La estrategia de resolució de col·lisions escollida ha sigut la de dispersió oberta, en concret, sinònims encadenats indirectes
    on cada cel·la de la taula apunta a una llista encadenada de sinònims i,
    a la taula de dispersió es guarda un punter al primer element de la llista de sinònims.

    · Hash table:
    S'ha escollit una taula de dispersió per les següents raons:
      1. La taula mai s'omplirà davant de noves col·lisions
      2. Creiem que es més util quan es desconeix quantes claus i amb quina freqüència
        s'insertaràn o eliminaran de la taula de dispersió
      3. Es menys sensible al fàctor de càrrega, ja que la mida de la taula no variarà
      4. Encara que el cost de crear la taula es superior davant les altres estructures de dades,
        la creació es farà només una vegada, però consultes, inserions i eliminacions, es faràn moltes vegades (incomptables).
        Això fa que encara que aquest sigui un punt negatiu, es compensa amb els baixos costos de la resta d'operacions.

    · Open Hashing - Separate chaining (Encadenaments indirectes):
    S'ha escollit aquesta estràtegia de resolució de col·lisions per les següents raons:
      1. La classe catàleg es una classe templatitzada, per tant, pot ser utilitzada per altres classes o programes,
        i no sabem quantes eliminacions es podrien arribar a fer. Això fa que la utilització d'una tècnica que marqui
        les cel·les com "esborrades" pot degradar el funcionament de la taula, a diferencia de la tècnica utilitzada,
        on s'eliminen directament els elements.
      2. S'evita el problema de l'apinyament que succeeix a la tècnica de Sondeig líneal, ja que, com al punt anterior,
      tampòc es coneix el nombre d'elements que es poden arribar a inserir a la taula de dispersió i això ho podria ocasionar.

    També es cert que no tot es idíl·lic en aquest tipus d'estrategia, ja que hi han parts de la taula que potser,
    mai s'utilitzaràn, a més, com el seu propi nom indica son encadenaments indirectes, per tant, per accedir al primer
    element de la llista de sinònims, l'accés no es immediat ja que hem de sortir de la taula i mantenir un punter al primer element de cada llista de sinònims.

*/
